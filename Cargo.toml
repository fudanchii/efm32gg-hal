[package]
name = "efm32hg-hal"
version = "0.1.0"
authors = ["chrysn <chrysn@fsfe.org>", "Nurahmadie <nurahmadie@gmail.com>"]

edition = "2018"

categories = ["embedded", "no-std"]
description = "HAL for the EFM32HG (EFM32 Happy Gecko) family of microcontrollers"
keywords = ["arm", "cortex-m", "efm32", "efm32hg", "embedded-hal-impl"]
license = "MIT OR Apache-2.0"

readme = "README.md"
repository = "https://github.com/fudanchii/efm32hg-hal"

[dependencies]
cortex-m = "0.5.2"

# version is a wild guess.
embedded-hal = "0.2.0"

# for efm32gg, it's probably convenient to depend on the biggest available
# svd2rust-generated crate (the chips will let us; FWICT all EFM32GG are the
# same and just have fewer pins wired); crates like efr32xg1 are already as
# generic as they can be with svd2rust. having bobbin will hopefully make this
# even smoother.
#
# efm32gg-hal implementation will be left as it is, but will not guaranteed to work,
# efm32gg devices should use upstream repository instead: github.com/chrysn/efm32gg-hal

efm32gg990 = { version = "0.1.2", optional = true }
efr32xg1 = { version = "0.2.0", optional = true }

[dependencies.efm32hg]
git = "https://github.com/em32-rs/efm32hg-pac"
optional = true
package = "efm32hg-pac"

[features]
default = [ "unproven" ]
unproven = [ "embedded-hal/unproven" ]

# Used by the newer generation of chips where peripherals have their individual
# functions routable, not only peripherals as a whole.
_routing_per_function = []

chip-efm32gg = [ "efm32gg990", "_has_timer2" ]
chip-efr32xg1 = [ "efr32xg1", "_routing_per_function" ]
chip-efm32hg = ["efm32hg/rt", "_has_timer2"]

# Marker features pulled in by the individual chip features. Enabling them
# manually results in build-time errors (as clocks or peripherals are accessed
# that are not available).
_has_timer2 = []
